I"ª<h2 id="1-introduction">1. Introduction</h2>
<p>The Union-Find (Disjoint Set Union, DSU) algorithm is used to efficiently keep track of a partition of a set into disjoint subsets.
It has two main operations: <br /></p>
<ul>
  <li><strong>Union</strong>: merge two subsets.</li>
  <li><strong>Find</strong>: determine which particular subset the element belongs.</li>
</ul>

<h2 id="2-operations">2. Operations</h2>
<h3 id="21-find-operations">2.1 Find Operations</h3>
<p><strong>Keep traveling towards the parent until we reach the top (no more parent)</strong>
<img src="/assets/images/Union Find/2-1.png" alt="2-1" title="2-1" /></p>

<ul>
  <li>Let 1 represent the parent of left group and 3 represents the parent of right group. <br />
  <em>parent = [1, 1, 1, 3, 3]</em> at this point.</li>
  <li>Execute <em>find(x)</em>, x = 2:
    <ul>
      <li><em>parent[2]</em> = 1 and 1 != x then keep traveling x = parent[x] = 1</li>
      <li><em>parent[1]</em> = 1 and 1 == x then stop</li>
    </ul>
  </li>
</ul>

<h3 id="22-union-operations">2.2 Union Operations</h3>
<p><strong>Merge y subset into x subset by assigning xâ€™s parent to y</strong>
<img src="/assets/images/Union Find/2-2.png" alt="2-2" title="2-2" /></p>
<ul>
  <li>Execute <em>union(2, 3)</em>:
    <ul>
      <li>assign 3â€™s parent as 2â€™s parent. <em>parent = [1, 1, 1, 1, 3]</em> at this point.</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UnionFind</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
	<span class="c1">#Initialize with parent[i] = i
</span>	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
	
	<span class="c1">#recursively find element's parent until its parent equal to itself (no parent)
</span>	<span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
		<span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">x</span> <span class="k">else</span> <span class="n">x</span>
	
	<span class="c1">#merge y's subset into x's subset
</span>	<span class="k">def</span> <span class="nf">union</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">y</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="3-union-find-algorithms-for-set-partition">3 Union Find Algorithms for Set Partition</h2>
<p>Suppose we want to find the number of subsets in the following graph.
<img src="/assets/images/Union Find/3-1.png" alt="3-1" title="3-1" /></p>

<p>$$Adj = [\begin{bmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; 0\end{bmatrix} \\ \begin{bmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; 0\end{bmatrix} \\ \begin{bmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; 0\end{bmatrix} \\ \begin{bmatrix}0 &amp; 0 &amp; 0 &amp; 1 &amp; 1\end{bmatrix} \\ \begin{bmatrix}0 &amp; 0 &amp; 0 &amp; 1 &amp; 1\end{bmatrix}]$$</p>

<p><strong>1. Initialize with <em>parent[i] = i</em> $$parent = \begin{bmatrix}0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \end{bmatrix}$$.</strong>
<img src="/assets/images/Union Find/3-2.png" alt="3-2" title="3-2" /></p>

<p><strong>2. Loop through each node to decide whether execute union based on connectivity.</strong></p>

<ul>
  <li>
    <p>node = 0: 1 and 2 are connected, execute <em>union(0, 1)</em> and <em>union(0, 2)</em> 
<img src="/assets/images/Union Find/3-3.png" alt="3-3" title="3-3" />
$$parent = \begin{bmatrix}0 &amp; 0 &amp; 2 &amp; 3 &amp; 4 \end{bmatrix}$$
<img src="/assets/images/Union Find/3-4.png" alt="3-4" title="3-4" />
$$parent = \begin{bmatrix}0 &amp; 0 &amp; 0 &amp; 3 &amp; 4 \end{bmatrix}$$</p>
  </li>
  <li>node = 1: 0 and 2 are connected, execute <em>union(1, 0)</em> and <em>union(1, 2)</em> -&gt; graph remains the same</li>
  <li>node = 2: 0 and 1 are connected, execute <em>union(2, 0)</em> and <em>union(2, 1)</em> -&gt; graph remains the same</li>
  <li>node = 3: 4 is connected, execute <em>union(3, 4)</em>
<img src="/assets/images/Union Find/3-5.png" alt="3-4" title="3-5" />
$$parent = \begin{bmatrix}0 &amp; 0 &amp; 0 &amp; 3 &amp; 3 \end{bmatrix}$$</li>
  <li>node = 4: 3 is connected, execute <em>union(4, 3)</em> and <em>union(2, 1)</em> -&gt; graph remains the same</li>
</ul>

<p><strong>3. Loop through parent array via find function to see which subset the node belongs to.</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">FindSebsetNum</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
<span class="k">for</span> <span class="n">node_1</span><span class="p">,</span> <span class="n">row_arr</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">Adj</span><span class="p">):</span>
	<span class="k">for</span> <span class="n">city_2</span><span class="p">,</span> <span class="n">connection</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row_arr</span><span class="p">):</span>
		<span class="k">if</span> <span class="n">connection</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
			<span class="n">uf</span><span class="p">.</span><span class="n">union</span><span class="p">(</span><span class="n">city_1</span><span class="p">,</span> <span class="n">city_2</span><span class="p">)</span>

<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">([</span><span class="n">uf</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">city</span><span class="p">)</span> <span class="k">for</span> <span class="n">city</span> <span class="ow">in</span> <span class="n">uf</span><span class="p">.</span><span class="n">parent</span><span class="p">]))</span>
</code></pre></div></div>
:ET